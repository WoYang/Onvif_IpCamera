/* soapAccessRulesBindingProxy.h
   Generated by gSOAP 2.8.45 for onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapAccessRulesBindingProxy_H
#define soapAccessRulesBindingProxy_H
#include "soapH.h"

    class SOAP_CMAC AccessRulesBindingProxy : public soap {
      public:
        /// Endpoint URL of service 'AccessRulesBindingProxy' (change as needed)
        const char *soap_endpoint;
        /// Variables globally declared in onvif.h, if any
        /// Construct a proxy with new managing context
        AccessRulesBindingProxy();
        /// Copy constructor
        AccessRulesBindingProxy(const AccessRulesBindingProxy& rhs);
        /// Construct proxy given a managing context
        AccessRulesBindingProxy(const struct soap&);
        /// Constructor taking an endpoint URL
        AccessRulesBindingProxy(const char *endpoint);
        /// Constructor taking input and output mode flags for the new managing context
        AccessRulesBindingProxy(soap_mode iomode);
        /// Constructor taking endpoint URL and input and output mode flags for the new managing context
        AccessRulesBindingProxy(const char *endpoint, soap_mode iomode);
        /// Constructor taking input and output mode flags for the new managing context
        AccessRulesBindingProxy(soap_mode imode, soap_mode omode);
        /// Destructor deletes deserialized data and managing context
        virtual ~AccessRulesBindingProxy();
        /// Initializer used by constructors
        virtual void AccessRulesBindingProxy_init(soap_mode imode, soap_mode omode);
        /// Return a copy that has a new managing context with the same engine state
        virtual AccessRulesBindingProxy *copy() SOAP_PURE_VIRTUAL;
        /// Copy assignment
        AccessRulesBindingProxy& operator=(const AccessRulesBindingProxy&);
        /// Delete all deserialized data (uses soap_destroy() and soap_end())
        virtual void destroy();
        /// Delete all deserialized data and reset to default
        virtual void reset();
        /// Disables and removes SOAP Header from message by setting soap->header = NULL
        virtual void soap_noheader();
        /// Add SOAP Header to message
        virtual void soap_header(char *wsa__MessageID, struct wsa__Relationship *wsa__RelatesTo, struct wsa__EndpointReferenceType *wsa__From, struct wsa__EndpointReferenceType *wsa__ReplyTo, struct wsa__EndpointReferenceType *wsa__FaultTo, char *wsa__To, char *wsa__Action, struct wsdd__AppSequenceType *wsdd__AppSequence, char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct _wsse__Security *wsse__Security);
        /// Get SOAP Header structure (i.e. soap->header, which is NULL when absent)
        virtual ::SOAP_ENV__Header *soap_header();
        /// Get SOAP Fault structure (i.e. soap->fault, which is NULL when absent)
        virtual ::SOAP_ENV__Fault *soap_fault();
        /// Get SOAP Fault string (NULL when absent)
        virtual const char *soap_fault_string();
        /// Get SOAP Fault detail as string (NULL when absent)
        virtual const char *soap_fault_detail();
        /// Close connection (normally automatic, except for send_X ops)
        virtual int soap_close_socket();
        /// Force close connection (can kill a thread blocked on IO)
        virtual int soap_force_close_socket();
        /// Print fault
        virtual void soap_print_fault(FILE*);
    #ifndef WITH_LEAN
    #ifndef WITH_COMPAT
        /// Print fault to stream
        virtual void soap_stream_fault(std::ostream&);
    #endif
        /// Write fault to buffer
        virtual char *soap_sprint_fault(char *buf, size_t len);
    #endif
        /// Web service operation 'GetServiceCapabilities' (returns SOAP_OK or error code)
        virtual int GetServiceCapabilities(_ns3__GetServiceCapabilities *ns3__GetServiceCapabilities, _ns3__GetServiceCapabilitiesResponse &ns3__GetServiceCapabilitiesResponse)
        { return this->GetServiceCapabilities(NULL, NULL, ns3__GetServiceCapabilities, ns3__GetServiceCapabilitiesResponse); }
        virtual int GetServiceCapabilities(const char *soap_endpoint, const char *soap_action, _ns3__GetServiceCapabilities *ns3__GetServiceCapabilities, _ns3__GetServiceCapabilitiesResponse &ns3__GetServiceCapabilitiesResponse);
        /// Web service operation 'GetAccessProfileInfo' (returns SOAP_OK or error code)
        virtual int GetAccessProfileInfo(_ns3__GetAccessProfileInfo *ns3__GetAccessProfileInfo, _ns3__GetAccessProfileInfoResponse &ns3__GetAccessProfileInfoResponse)
        { return this->GetAccessProfileInfo(NULL, NULL, ns3__GetAccessProfileInfo, ns3__GetAccessProfileInfoResponse); }
        virtual int GetAccessProfileInfo(const char *soap_endpoint, const char *soap_action, _ns3__GetAccessProfileInfo *ns3__GetAccessProfileInfo, _ns3__GetAccessProfileInfoResponse &ns3__GetAccessProfileInfoResponse);
        /// Web service operation 'GetAccessProfileInfoList' (returns SOAP_OK or error code)
        virtual int GetAccessProfileInfoList(_ns3__GetAccessProfileInfoList *ns3__GetAccessProfileInfoList, _ns3__GetAccessProfileInfoListResponse &ns3__GetAccessProfileInfoListResponse)
        { return this->GetAccessProfileInfoList(NULL, NULL, ns3__GetAccessProfileInfoList, ns3__GetAccessProfileInfoListResponse); }
        virtual int GetAccessProfileInfoList(const char *soap_endpoint, const char *soap_action, _ns3__GetAccessProfileInfoList *ns3__GetAccessProfileInfoList, _ns3__GetAccessProfileInfoListResponse &ns3__GetAccessProfileInfoListResponse);
        /// Web service operation 'GetAccessProfiles' (returns SOAP_OK or error code)
        virtual int GetAccessProfiles(_ns3__GetAccessProfiles *ns3__GetAccessProfiles, _ns3__GetAccessProfilesResponse &ns3__GetAccessProfilesResponse)
        { return this->GetAccessProfiles(NULL, NULL, ns3__GetAccessProfiles, ns3__GetAccessProfilesResponse); }
        virtual int GetAccessProfiles(const char *soap_endpoint, const char *soap_action, _ns3__GetAccessProfiles *ns3__GetAccessProfiles, _ns3__GetAccessProfilesResponse &ns3__GetAccessProfilesResponse);
        /// Web service operation 'GetAccessProfileList' (returns SOAP_OK or error code)
        virtual int GetAccessProfileList(_ns3__GetAccessProfileList *ns3__GetAccessProfileList, _ns3__GetAccessProfileListResponse &ns3__GetAccessProfileListResponse)
        { return this->GetAccessProfileList(NULL, NULL, ns3__GetAccessProfileList, ns3__GetAccessProfileListResponse); }
        virtual int GetAccessProfileList(const char *soap_endpoint, const char *soap_action, _ns3__GetAccessProfileList *ns3__GetAccessProfileList, _ns3__GetAccessProfileListResponse &ns3__GetAccessProfileListResponse);
        /// Web service operation 'CreateAccessProfile' (returns SOAP_OK or error code)
        virtual int CreateAccessProfile(_ns3__CreateAccessProfile *ns3__CreateAccessProfile, _ns3__CreateAccessProfileResponse &ns3__CreateAccessProfileResponse)
        { return this->CreateAccessProfile(NULL, NULL, ns3__CreateAccessProfile, ns3__CreateAccessProfileResponse); }
        virtual int CreateAccessProfile(const char *soap_endpoint, const char *soap_action, _ns3__CreateAccessProfile *ns3__CreateAccessProfile, _ns3__CreateAccessProfileResponse &ns3__CreateAccessProfileResponse);
        /// Web service operation 'ModifyAccessProfile' (returns SOAP_OK or error code)
        virtual int ModifyAccessProfile(_ns3__ModifyAccessProfile *ns3__ModifyAccessProfile, _ns3__ModifyAccessProfileResponse &ns3__ModifyAccessProfileResponse)
        { return this->ModifyAccessProfile(NULL, NULL, ns3__ModifyAccessProfile, ns3__ModifyAccessProfileResponse); }
        virtual int ModifyAccessProfile(const char *soap_endpoint, const char *soap_action, _ns3__ModifyAccessProfile *ns3__ModifyAccessProfile, _ns3__ModifyAccessProfileResponse &ns3__ModifyAccessProfileResponse);
        /// Web service operation 'DeleteAccessProfile' (returns SOAP_OK or error code)
        virtual int DeleteAccessProfile(_ns3__DeleteAccessProfile *ns3__DeleteAccessProfile, _ns3__DeleteAccessProfileResponse &ns3__DeleteAccessProfileResponse)
        { return this->DeleteAccessProfile(NULL, NULL, ns3__DeleteAccessProfile, ns3__DeleteAccessProfileResponse); }
        virtual int DeleteAccessProfile(const char *soap_endpoint, const char *soap_action, _ns3__DeleteAccessProfile *ns3__DeleteAccessProfile, _ns3__DeleteAccessProfileResponse &ns3__DeleteAccessProfileResponse);
    };
#endif
